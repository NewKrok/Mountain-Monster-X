package mmx.state;

import apostx.replaykit.Playback;
import apostx.replaykit.Recorder;
import flixel.FlxCamera;
import flixel.FlxCamera.FlxCameraFollowStyle;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.FlxState;
import flixel.group.FlxSpriteGroup;
import flixel.math.FlxAngle;
import flixel.math.FlxPoint;
import flixel.tweens.FlxTween;
import flixel.util.FlxColor;
import haxe.Timer;
import hpp.flixel.HPPCamera;
import hpp.flixel.ui.HPPButton;
import hpp.flixel.util.HPPAssetManager;
import mmx.assets.CarDatas;
import mmx.datatype.LevelData;
import mmx.game.Background;
import mmx.game.Car;
import mmx.game.Coin;
import mmx.game.GameGui;
import mmx.game.GhostCar;
import mmx.game.SmallRock;
import mmx.game.constant.CGameTimeValue;
import mmx.game.constant.CLibraryElement;
import mmx.game.constant.CPhysicsValue;
import mmx.game.constant.CScore;
import mmx.game.library.crate.AbstractCrate;
import mmx.game.library.crate.Crate;
import mmx.game.library.crate.LongCrate;
import mmx.game.library.crate.RampCrate;
import mmx.game.library.crate.SmallCrate;
import mmx.game.library.crate.SmallLongCrate;
import mmx.game.library.crate.SmallRampCrate;
import mmx.game.snow.Snow;
import mmx.game.substate.EndLevelPanel;
import mmx.game.substate.HelpPanel;
import mmx.game.substate.PausePanel;
import mmx.game.substate.StartLevelPanel;
import mmx.game.terrain.BrushTerrain;
import mmx.game.NotificationHandler.Notification;
import mmx.state.MenuState.MenuSubStateType;
import mmx.util.LevelUtil;
import mmx.util.SavedDataUtil;
import nape.constraint.PivotJoint;
import nape.dynamics.InteractionFilter;
import nape.geom.Vec2;
import nape.phys.Body;
import nape.phys.BodyType;
import nape.shape.Polygon;
import nape.space.Space;
import openfl.Assets;
import openfl.geom.Rectangle;

class GameState extends FlxState
{
	inline static var LEVEL_DATA_SCALE:Float = 2;

	var space:Space;
	
	var startLevelPanel:StartLevelPanel;
	var endLevelPanel:EndLevelPanel;
	var pausePanel:PausePanel;
	var helpPanel:HelpPanel;
	var gameGui:GameGui;
	var background:Background;

	var container:FlxSpriteGroup;
	var terrainContainer:FlxSpriteGroup;
	var coinContainer:FlxSpriteGroup;
	var libraryElementContainer:FlxSpriteGroup;

	var lastCameraStepOffset:FlxPoint;

	var groundBodies:Array<Body>;

	var bridgeBodies:Array<Array<Body>>;
	var bridgeBlocks:Array<Array<FlxSprite>>;

	var smallRocks:Array<SmallRock>;
	var usedSmallRocks:Array<SmallRock>;

	var coins:Array<Coin>;

	var gameObjects:Array<FlxSprite>;
	
	var recorder:Recorder;
	var playback:Playback;
	
	var car:Car;
	var ghostCar:GhostCar;
	var snow:Snow;
	
	/*
		var achievementManager:AchievementManager;	
	*/
		
	var effects:Array<FlxSprite> = [];
	var crates:Array<AbstractCrate> = [];

	var levelData:LevelData;
	var levelId:UInt;
	var worldId:UInt;

	var left:Bool;
	var right:Bool;
	var up:Bool;
	var down:Bool;

	var gameTime:Float = 0;
	var gameStartTime:Float = 0;
	var pauseStartTime:Float = 0;
	var totalPausedTime:Float = 0;

	var collectedCoin:UInt = 0;
	var collectedExtraCoins:UInt = 0;

	var countOfFrontFlip:UInt = 0;
	var countOfBackFlip:UInt = 0;
	var countOfNiceWheelie:UInt = 0;
	var countOfNiceAirTime:UInt = 0;

	var isLost:Bool;
	var isWon:Bool;
	var canControll:Bool;
	var isGameStarted:Bool;
	var isGamePaused:Bool;
	var isPhysicsEnabled:Bool;
	
	var now:Float;

	public function new( worldId:UInt, levelId:UInt ):Void
	{
		this.worldId = worldId;
		this.levelId = levelId;
		
		var levelInfo:LevelInfo = SavedDataUtil.getLevelInfo(worldId, levelId);
		SavedDataUtil.resetLastPlayedInfo();
		levelInfo.isLastPlayed = true;
		SavedDataUtil.setLastPlayedWorldId(worldId);
		SavedDataUtil.save();
		
		super();
	}
	
	override public function create():Void
	{
		super.create();

		loadAssets();
		
		levelData = LevelUtil.LevelDataFromJson( Assets.getText( "assets/data/level/world_" + worldId + "/level_" + worldId + "_" + levelId + ".json" ) );
		setLevelDataScale();
		
		build();
	}
	
	function loadAssets():Void
	{
		CarDatas.loadData( Assets.getText( "assets/data/car_datas.json" ) );
		
		HPPAssetManager.loadXMLAtlas( "assets/images/atlas1.png", "assets/images/atlas1.xml" );
		HPPAssetManager.loadXMLAtlas( "assets/images/atlas2.png", "assets/images/atlas2.xml" );
		HPPAssetManager.loadXMLAtlas( "assets/images/atlas3.png", "assets/images/atlas3.xml" );
		
		HPPAssetManager.loadJsonAtlas( "assets/images/terrain_textures.png", "assets/images/terrain_textures.json" );
	}

	function setLevelDataScale():Void
	{
		for ( i in 0...levelData.groundPoints.length )
		{
			levelData.groundPoints[i] = new FlxPoint( levelData.groundPoints[i].x * LEVEL_DATA_SCALE, levelData.groundPoints[i].y * LEVEL_DATA_SCALE );
		}

		for ( i in 0...levelData.starPoints.length )
		{
			levelData.starPoints[i] = new FlxPoint( levelData.starPoints[i].x * LEVEL_DATA_SCALE, levelData.starPoints[i].y * LEVEL_DATA_SCALE );
		}

		if ( levelData.bridgePoints != null )
		{
			for ( i in 0...levelData.bridgePoints.length )
			{
				levelData.bridgePoints[i].bridgeAX *= LEVEL_DATA_SCALE;
				levelData.bridgePoints[i].bridgeAY *= LEVEL_DATA_SCALE;
				levelData.bridgePoints[i].bridgeBX *= LEVEL_DATA_SCALE;
				levelData.bridgePoints[i].bridgeBY *= LEVEL_DATA_SCALE;
			}
		}
		
		if ( levelData.gameObjects != null )
		{
			for ( i in 0...levelData.gameObjects.length )
			{
				levelData.gameObjects[i].x *= LEVEL_DATA_SCALE;
				levelData.gameObjects[i].y *= LEVEL_DATA_SCALE;
				levelData.gameObjects[i].pivotX *= LEVEL_DATA_SCALE;
				levelData.gameObjects[i].pivotY *= LEVEL_DATA_SCALE;
			}
		}
		
		if ( levelData.libraryElements != null )
		{
			for ( i in 0...levelData.libraryElements.length )
			{
				levelData.libraryElements[i].x *= LEVEL_DATA_SCALE;
				levelData.libraryElements[i].y *= LEVEL_DATA_SCALE;
			}
		}
		
		levelData.startPoint = new FlxPoint( levelData.startPoint.x * LEVEL_DATA_SCALE, levelData.startPoint.y * LEVEL_DATA_SCALE );
		levelData.finishPoint = new FlxPoint( levelData.finishPoint.x * LEVEL_DATA_SCALE, levelData.finishPoint.y * LEVEL_DATA_SCALE );

		levelData.cameraBounds = new Rectangle(
			levelData.cameraBounds.x * LEVEL_DATA_SCALE,
			levelData.cameraBounds.y * LEVEL_DATA_SCALE,
			levelData.cameraBounds.width * LEVEL_DATA_SCALE,
			levelData.cameraBounds.height * LEVEL_DATA_SCALE
		);
	}

	function build():Void
	{
		destroySubStates = false;
		
		pausePanel = new PausePanel( resumeRequest, restartRequest, exitRequest );
		endLevelPanel = new EndLevelPanel(SavedDataUtil.getLevelInfo(worldId, levelId), levelData.starValues, restartRequest, exitRequest, nextLevelRequest, prevLevelRequest);
		
		lastCameraStepOffset = new FlxPoint();

		add( background = new Background( worldId ) );
		add( container = new FlxSpriteGroup() );
		
		createCamera();
		createPhysicsWorld();
		createGroundPhysics();
		createCar();
		createGhostCar();
		createGameObjects();
		createBridges();
		createGroundGraphics();
		createCoins();
		createSmallRocks();
		createLibraryElements();

		camera.follow( car.carBodyGraphics, FlxCameraFollowStyle.PLATFORMER, 5 / FlxG.updateFramerate );

		switch ( worldId )
		{
			case 1:
				snow = new Snow();
				add( snow );
		}
		
		add( gameGui = new GameGui( resume, pauseRequest ) );
		
		//cast( camera, HPPCamera ).addZoomResistanceToSprite( gameGui );
		//cast( camera, HPPCamera ).addZoomResistanceToSprite( background );

		reset();
		
		if (levelId == 0 && !SavedDataUtil.getHelpInfo(worldId).isShowed)
		{
			helpPanel = new HelpPanel( worldId, openStartLevelPanelRequest );
			openSubState( helpPanel );
		}
	}
	
	function openStartLevelPanelRequest(target:HPPButton = null):Void
	{
		if (startLevelPanel != null)
		{
			startLevelPanel.destroy();
			startLevelPanel = null;
		}
		
		startLevelPanel = new StartLevelPanel(SavedDataUtil.getLevelInfo(worldId, levelId), levelData.starValues, resumeRequest, exitRequest, nextLevelRequest, prevLevelRequest);
		openSubState( startLevelPanel );
	}

	function reset():Void
	{
		isLost = false;
		isWon = false;
		canControll = true;
		left = false;
		right = false;
		up = false;
		down = false;
		isGameStarted = false;
		isGamePaused = false;
		collectedCoin = 0;
		collectedExtraCoins = 0;
		countOfFrontFlip = 0;
		countOfBackFlip = 0;
		countOfNiceAirTime = 0;
		countOfNiceWheelie = 0;
		gameTime = 0;
		totalPausedTime = 0;
		
		car.isOnWheelie = false;
		car.isOnAir = false;
		car.jumpAngle = 0;
		car.lastAngleOnGround = 0;

		gameGui.updateCoinCount( collectedCoin );
		gameGui.updateRemainingTime( CGameTimeValue.MAXIMUM_GAME_TIME );

		for ( i in 0...coins.length )
		{
			coins[ i ].reset( levelData.starPoints[ i ].x, levelData.starPoints[ i ].y );
		}

		for ( i in 0...smallRocks.length )
		{
			smallRocks[ i ].reset( 0, 0 );
		}

		car.teleportTo( levelData.startPoint.x, levelData.startPoint.y );

		cast( camera, HPPCamera ).resetPosition();
		camera.focusOn( car.carBodyGraphics.getPosition() );
		background.update( 1 );
		lastCameraStepOffset.set( camera.scroll.x, camera.scroll.y );

		resetCrates();
		updateBridges();
		
		start();

		resetReplayKit();
		
		openStartLevelPanelRequest();
		pause();
		isPhysicsEnabled = true;
	}
	
	function resetReplayKit():Void
	{
		if ( recorder != null )
		{
			recorder.dispose();
		}

		recorder = new Recorder( car );
		
		recorder.enableAutoRecording( 250 );
		
		ghostCar.sync( car );
		
		if ( playback != null )
		{
			playback.dispose();
		}
		
		playback = new Playback( ghostCar, "aoy9:timestampi1y4:datay39:d372.5d423.5zd486.5d466.5zd379.5d466.5zgoR0i2R1y170:d372.5451537037784d433.45317325976043d0.12840113827418972d486.4848580438659d475.20000000000005d-0.8845613026587826d379.4249773414658d475.20000000000005d0.3619457968937478goR0i253R1R3goR0i504R1R3goR0i753R1R3goR0i1011R1y170:d382.87421614146865d433.11530614946736d-1.7423014152799492d499.7013350950813d474.65272500165395d266.30304538193246d392.64232611925445d475.20000000000005d247.6641641122837goR0i1258R1y166:d441.9885070816538d433.0800754028854d-1.7152142027324764d558.5993354141345d475.00240282984487d692.1899286568545d451.5384433041123d475.20000000000005d626.0291560395049goR0i1505R1y168:d561.0574454594318d433.16494259014263d-1.5634987135583287d677.5691108161986d475.00240282984487d1140.9929093347425d570.5082281434816d475.20000000000005d1036.219303725681goR0i1759R1y167:d719.3743557988078d433.0478113554295d0.09352207672011893d830.9479484873499d471.52782919367195d1573.164616680723d724.0796118942116d475.20000000114385d1485.3499027013836goR0i2002R1y166:d816.057527588024d421.5251874954186d-11.014314232517115d932.2112670815562d451.28827805222426d1879.3417909175762d827.1189335504164d471.6993268531354d1777.7330810013966goR0i2256R1y166:d969.1395041076516d385.0620591501209d-15.847465809032942d1090.1465382390302d409.01637158533873d2357.971757589342d987.8565254140846d440.3231966712471d2251.778807422005goR0i2504R1y166:d1091.8369151871943d344.981920246197d-19.958103408912166d1215.42728788535d367.2723292773707d2751.0090074756295d1113.9004857577459d401.2561566859731d2625.3615799676463goR0i2755R1y168:d1241.6617399509846d298.9908963153718d-15.113157674098515d1363.0930810004797d326.7262157351493d3206.951851714372d1259.2806160842863d353.0448178682454d3066.0615883546793goR0i3008R1y166:d1391.3594993328163d280.9481221344971d-5.000536231262668d1508.2414134457624d319.027014406078d3663.4883229933603d1401.5640128762977d328.3891747493298d3495.144922293187goR0i3257R1y167:d1540.2381230115925d301.3331562868835d4.712016382155781d1651.2164722281373d348.75515138651787d4118.315775282391d1544.4902817643838d339.97549432117586d3922.622006540577goR0i3509R1y166:d1688.2692760265097d359.528411887305d14.384769477347009d1791.8845749144134d415.1258814662252d4571.440606199378d1688.1530151836362d388.53279319506737d4348.498854003588goR0i3756R1y166:d1833.3624106400111d444.60910401888736d13.401898871752348d1938.1174153913294d491.9596136423356d5032.155937867908d1832.798834735269d472.7354078706818d4806.811794673638goR0i4010R1y167:d1970.8606255822601d472.75950506371123d-2.2526302548825052d2086.888799387118d516.3591523943452d5463.132450715283d1979.9488738848934d511.7723266542582d5227.543540087705goR0i4257R1y163:d2137.117693596352d482.32614668009285d-0.6137274291393041d2250.985723001617d525.5800314008284d5921.38409526091d2144.030025247433d523.650831703549d5689.757293329267goR0i4505R1y168:d2283.8967841007616d474.55875318768057d-10.411721687297561d2403.6079238392444d508.8250346530376d6387.565746207002d2297.7290380651657d524.5914426285266d6143.824762107667goR0i4756R1y168:d2430.6376717541384d467.54681233936867d-21.05127032324689d2554.8631609886415d490.2850016805412d6845.817390752629d2451.6333567174593d518.6170906993765d6591.6722853861975goR0i5007R1y168:d2577.9584985821753d446.14907575601063d-22.178220418042404d2693.3399214401506d464.9237444247802d7273.005337843047d2592.932279385868d501.62644722416917d7028.100323690659goR0i5252R1y164:d2697.97430628339d397.57586642030185d-7.151780225661546d2815.949100777743d433.5467234448089d7696.010304717326d2709.817518731828d447.65062806864523d7453.253759710515goR0i5506R1y165:d2834.939156922102d371.77710988864044d0.8229703449458023d2947.305147664367d406.90133619952184d8178.072905521254d2840.559539992806d414.8338456305655d7942.055513892517goR0i5756R1y165:d2940.6867536147906d334.18962497727665d-35.84583770953379d3065.4146247957274d340.6689589511833d8630.871317012507d2972.0452389069774d393.10655467138673d8375.491765489goR0i6009R1y163:d3041.1939983937264d271.32643657689107d-39.61510274104872d3165.3243644268896d270.7081944384097d9089.122961558132d3082.8201798439d338.9435350221461d8811.20408649267goR0i6256R1y166:d3158.428276935348d217.764156560395d-45.549642142752624d3280.7645923062687d210.97279806984946d9547.37460610376d3206.0488470176138d287.65031217902407d9249.587245792383goR0i6506R1y165:d3275.472137841477d194.45884566620953d-49.9128604376713d3398.077453897738d183.23667946806074d10005.626250649388d3322.7412768924178d259.1833034672059d9689.33434554361goR0i6756R1y169:d3376.8855340475543d114.59462223647023d-41.64385719971413d3500.8829269241214d112.60485759361245d10461.980015552055d3419.599595704034d182.2703677779836d10096.325442320274goR0i7009R1y169:d3474.4159884408145d43.118400628886874d-30.279218676350837d3598.521808229492d53.57339543674617d10919.63647870184d3506.1757475356735d107.74386616974627d10515.083385838272goR0i7255R1y166:d3571.797180711706d9.680469295911337d-19.297363915237657d3694.3211899249573d32.55207710452232d11375.6025646557d3593.2527432137595d67.95113036569425d10927.691847538965goR0i7505R1y167:d3668.7289288261204d14.452023401307088d-8.320830237889776d3787.24122518263d49.149416885157336d11829.861766825466d3681.308937026265d64.65596901237937d11338.755732320122goR0i7755R1y168:d3765.0602954964197d57.27431912732867d2.6059168449025987d3877.450358019991d102.76915304310077d12282.420474836035d3770.4738760603236d97.91408073204985d11748.280822219878goR0i8007R1y165:d3860.689644096067d137.96373043443708d13.489718424340133d3965.02251002719d192.86042497140244d12733.28505439309d3860.912786247227d167.89966307456143d12156.27287763163goR0i8255R1y168:d3955.511462416648d256.2674016783827d24.325609840926404d4050.2353381530065d318.87427189222285d13182.461847372648d3952.6525666707053d274.7739620082414d12562.737637385057goR0i8503R1y163:d4049.32339100038d411.7954083909051d33.79753514329799d4134.034945196071d479.8453338272855d13633.729052705734d4045.683160078545d419.3186944398797d12985.619018743984goR0i8754R1y164:d4142.366176325442d517.7829822893032d5.290428051892391d4255.274186204702d555.0245701835971d14044.589493310397d4148.405985947222d548.0735790924828d13439.554248962108goR0i9007R1y165:d4261.216513645534d489.6706462389261d-33.79255226586116d4385.975915018631d496.9870401059785d14502.841137856025d4295.787838919118d554.6655441394958d13875.520113019915goR0i9254R1y165:d4363.128403965866d482.96829644576826d-68.9041930170322d4478.20801223154d451.54460048929724d14899.992563128915d4427.893250526093d546.0640758145711d14266.250952179491goR0i9504R1y165:d4443.531303331955d407.83730698590915d-86.9158935984961d4541.0548148965545d361.8405713420087d15358.244207674566d4533.59421280686d468.6455078328594d14687.508069136837goR0i9754R1y165:d4512.654706559197d326.74347075523195d-105.54368173452708d4591.87334373558d270.1270596514473d15816.495852220218d4612.829552181062d375.1301463225353d15108.94675836931goR0i10006R1y168:d4552.241664815169d224.34523447038526d-117.99814609514195d4615.347609219232d167.70151754786346d16274.747496765869d4667.437236695126d261.2650676060937d15547.667530696528goR0i10252R1y168:d4591.329704989529d156.99886981276026d-118.0538798553281d4654.590030245938d100.05621016547525d16702.449031675143d4706.155792357546d193.86836618844018d15975.369065605802goR0i10504R1y166:d4636.35334542718d114.74472123271045d-101.33806653231062d4718.232420473176d61.761504014665064d17191.25078585717d4740.673810740703d166.45046325708222d16464.17081978783goR0i10756R1y167:d4683.049337213522d110.18920031677834d-69.69317737410117d4793.736044246426d78.40520569556907d17649.502430402823d4758.019209356585d179.32275180410437d16922.422464333482goR0i11008R1y169:d4738.385672399241d146.66335570819248d-23.849292442644728d4862.025800232313d164.88272056585453d18107.754074948476d4764.406840534859d208.84649885343535d17380.674108879135goR0i11254R1y165:d4796.450890855415d225.91824548098265d21.319878819675345d4895.25372307365d272.67958164498066d18549.82446677403d4792.799039304252d242.0314015085085d17824.495126860027goR0i11505R1y167:d4895.797944417787d225.44907183816576d45.741154868470126d4966.743742035245d298.4776994327397d18950.545725210017d4893.325535705727d220.56467727081636d18243.157932505208goR0i11755R1y166:d5002.493105573689d259.8711034620744d57.569981576517975d5060.6888016759485d333.23281123123877d19408.79736975567d5004.486350157546d242.11328106845565d18701.40957705086goR0i12017R1y166:d5087.215422404545d310.31497912891507d55.758330895454286d5147.5242779171695d383.64926155919335d19775.39868539219d5088.4139268066d294.36969252612414d19068.010892687384goR0i12255R1y165:d5191.63332987316d402.37040602237977d39.432076945767264d5270.130857714927d472.7559682319322d20233.650329937842d5188.311410428209d403.7224232175623d19526.262537233033goR0i12502R1y165:d5284.2967557157845d518.8615095473766d10.245492341958657d5390.615659459613d572.0165632756593d20661.351864847118d5285.465201767155d551.6801007367958d19953.96407214231goR0i12758R1y164:d5429.774929521829d585.3413655870339d18.090824501832827d5530.066006000982d643.9778044164608d21143.986001529945d5428.438975104821d610.6401509405345d20395.65567647597goR0i13010R1y165:d5581.150606040319d630.0679592634352d10.401323842488393d5687.749481536147d675.3521687182696d21603.467039599014d5581.460906941945d662.5636519703031d20857.745307458452goR0i13254R1y165:d5720.128652779543d627.9111384339911d-10.121112290560227d5839.189597647925d662.5783189929642d22063.276680802846d5732.871070444506d675.0855919475712d21295.85771804082goR0i13506R1y163:d5869.531110659104d618.9190452341992d-19.33916753266924d5992.646666140762d642.1758474864102d22521.52068782109d5890.737612006318d675.0780665475554d21748.93546767559goR0i13754R1y167:d6023.0118093145575d625.0832251474062d-21.562181832220794d6145.969258680993d645.3135239269118d22978.742563410815d6046.534258902854d684.9830304824781d22195.905975347905goR0i14008R1y164:d6175.931287253638d668.275650132251d-23.854707449420957d6299.420891625924d686.031916997778d23436.102697297658d6201.501401419367d729.3192530007368d22648.868051863767goR0i14256R1y164:d6335.7541522118045d709.9269936903422d-9.944095120223222d6455.851682400081d742.6784468037713d23894.14732508756d6349.593624096719d755.8626734659574d23091.93971339818goR0i14505R1y164:d6503.042215163809d703.3352903104603d-2.2398070705651865d6617.54608028954d741.2061659959998d24343.248629354937d6510.7218626314125d747.5422449364719d23549.2362149386goR0i14755R1y164:d6639.423675930331d655.1820113405261d-24.763148288074326d6764.376054150792d674.0285305977256d24804.9397078918d6665.050278152694d713.9577441629893d24008.347920524524goR0i15006R1y164:d6771.432684932016d610.4475344937482d-47.22061213520915d6894.558650338822d601.9895921177689d25263.19135243745d6819.861792384416d678.6725914148511d24465.121023657477goR0i15254R1y165:d6873.770519053487d545.379194914367d-35.89778400074287d6998.435502852784d549.5385648300072d25721.442996983104d6911.1375566686775d611.5576154994259d24899.502101070735goR0i15506R1y165:d6970.877581323388d498.9845185688307d-6.458457021828363d7088.479653606924d535.9842525139695d26179.694641528753d6982.059574723707d547.7632003058131d25357.753745616385goR0i15755R1y164:d7065.950338650459d495.22162303608036d23.22746375598781d7161.254068129294d557.5455419342481d26637.946286074406d7063.094929498752d514.805060126678d25816.005390162038goR0i16008R1y162:d7155.651714194172d528.6329858711136d41.62281492547759d7231.827717020748d599.7050643923416d27096.197930620056d7152.675377118701d527.58141527457d26274.257034707687goR0i16255R1y162:d7242.424683373926d594.8207729028036d44.486372704004026d7315.475362559037d666.6371993711824d27554.44957516571d7240.06880608452d590.6336732015101d26732.50867925334goR0i16503R1y163:d7327.023475431531d693.4129829510985d31.720908568870165d7413.752976930427d760.5941053241388d28012.70121971136d7323.414271433976d703.1553868007315d27190.76032379899goR0i16755R1y151:d7412.93257332134d759.5015904507079d-10.88347635482348d7534.534640312196d793.0320751776313d28441.87072160452d7427.481714606481d795.2d27610.140165109045goR0i17009R1y163:d7550.932858001682d728.0435920003453d-23.763990674645303d7674.501992126213d745.816457099336d28900.122366150168d7575.48384762616d786.5556868449092d28048.56502997016goR0i17252R1y165:d7686.719122479931d700.6164859404329d-23.19264595832339d7811.010107507831d719.3223984265122d29327.823901059444d7711.737515231561d759.4050653279352d28446.884878751225goR0i17507R1y164:d7812.520192375123d635.6171321335281d-43.28601151506266d7930.626024705148d631.6451174544287d29772.72930798545d7854.935544732427d707.3559634720198d28914.377433372752goR0i17756R1y165:d7880.876867707063d549.7518318965344d-60.207412577355164d7998.4711666491485d526.9658985218648d30200.43084289468d7944.21573864474d619.3015943169714d29318.230148694118goR0i18008R1y165:d7958.287929280933d476.49277017632863d-72.83207506128672d8066.486292400723d441.75492130508803d30658.68248744028d8036.12207817234d544.4535875453795d29776.481793239724goR0i18256R1y164:d8038.885722842446d438.5638445942248d-72.16306316300314d8147.49712037215d404.41005855606943d31116.934131985883d8116.006767225034d506.7406322524058d30234.73343778533goR0i18506R1y163:d8114.64038563766d405.5130702490874d-50.4559984853811d8236.882717171948d392.7486531787495d31575.185776531485d8167.505809725762d474.2858157489775d30673.569480391343goR0i18754R1y164:d8194.722487218989d370.6529063186455d-20.556345119860687d8317.788267707316d393.3335728208722d32033.437421077087d8216.79352511764d428.83905403557884d31114.2391594285goR0i19009R1y166:d8272.157027232852d369.0374982581453d-1.8843107720122516d8387.039006557903d410.96525769339144d32491.68906562269d8279.973795118227d413.1097898684443d31572.490803974102goR0i19254R1y166:d8344.856751689213d403.89669756540843d3.110154192890258d8456.618205062854d450.3079158101686d32949.940710168295d8349.764449479728d443.51890583797183d32030.742448519704goR0i19504R1y167:d8415.86885801848d396.90440526513953d-23.439169997640175d8541.831843422322d417.91589482347564d33380.010086265735d8439.872306642259d450.58493126589605d32471.60637884813goR0i19752R1y165:d8500.406071927118d364.6433402647914d-31.489076020118826d8625.295013704714d373.43114733725844d33807.71162117496d8533.690701416246d428.9029208322181d32875.44009845483goR0i20005R1y163:d8624.127379892338d333.7553848994433d-45.34694310140016d8748.617606429481d326.7107922457536d34296.51337535694d8671.17167170333d400.5720896376019d33314.227132721266goR0i20254R1y165:d8760.546838028935d286.72926622002575d-54.29775154248905d8881.176983107243d269.9679346208812d34754.76501990254d8816.678523583403d355.29010717884717d33750.11088775852goR0i20503R1y166:d8898.065290089029d220.9155347230566d-52.67854908218233d9018.766393130465d205.76853495042252d35213.01666444814d8952.921363193871d290.00901879668635d34190.840438836596goR0i20756R1y165:d9034.837769666205d155.74632508445384d-37.54872738340798d9158.91813018452d158.01368568345927d35671.26830899374d9074.002776484389d223.27363841185337d34640.15545608011goR0i21009R1y165:d9164.144135710118d107.1674286576079d-26.367523808386274d9284.776114662809d118.16587112387754d36092.71013289047d9190.031609993232d168.08145082519422d35088.6393925864goR0i21256R1y164:d9284.158986602111d43.33981821003475d-24.702582900061813d9407.682431712645d59.93213908403929d36546.00933163864d9310.57811024044d105.01940403476777d35546.89103713201goR0i21502R1y164:d9404.344364327044d-2.3678321448653357d-17.08510276522598d9526.44462124179d23.16811947118218d36973.71086654787d9423.923164180926d54.13303721430259d35941.77490059424goR0i21755R1y165:d9547.4222349655d-22.690436461372755d-6.968113345137386d9665.32562716142d13.436370581370198d37462.512620729845d9559.012365751229d26.333993185704564d36430.57665477621goR0i22008R1y163:d9680.79607246657d-2.476670107112085d2.436148172989024d9793.297925534514d42.85039529353038d37920.76426527545d9686.31069217768d38.310118039416025d36888.828299321816goR0i22256R1y163:d9813.401292681947d55.529506499886d11.777874386145548d9919.129701484047d109.04317321701672d38379.01590982105d9814.305585056907d87.19799946282347d37347.079943867415goR0i22504R1y166:d9944.813101602615d150.7767007812177d18.799018300158473d10044.126769212955d210.23944886062674d38837.267554366656d9943.218013399259d174.3622704350304d37805.33158841302goR0i22755R1y168:d10072.464567552739d279.87624506793776d12.462040333136502d10177.196368551993d334.53943015665203d39295.51919891226d10072.96270203257d310.11774176268096d38263.58323295862goR0i23006R1y170:d10191.389707157823d429.79960091011293d-13.622593816833929d10304.950934242677d441.61661013034274d39751.202156142295d10199.857369721849d462.0336369973269d38700.33176022209goR0i23255R1y170:d10277.273829134225d378.51661844288424d-15.657806625836677d10398.745814079432d405.65631676579767d40186.10223803988d10295.775997659715d435.01377644658277d39148.70975159776goR0i23506R1y166:d10370.53311782097d363.6874997845326d-14.900469018514402d10491.762898337529d391.43052354540583d40644.35388258548d10388.24445604028d418.8018548141204d39606.96139614336goR0i23756R1y168:d10475.844449133278d351.3247130041429d-13.727270564197852d10598.347995684577d378.66303423532696d41066.54934839664d10494.237546836284d403.0504714075564d40018.40864163004goR0i24009R1y166:d10622.59540518817d315.5653775869885d-14.502101214745968d10744.18965931775d343.9629705055839d41523.19693158023d10640.089893818964d368.42776549524854d40450.98717796453goR0i24252R1y165:d10769.323043305636d290.5777655184257d-4.429785502947459d10885.85115002334d329.2515711065855d41950.89846648946d10779.155357180254d337.6805701403978d40873.23170195267goR0i24503R1y166:d10936.345276461796d300.6883597334447d7.644327068469171d11045.080539376111d350.94988525067424d42439.70022067143d10939.011012925039d336.2810225638422d41362.03345613464goR0i24755R1y167:d11089.382115134938d347.22819025967584d8.60363771996615d11197.168454728826d398.69485845951266d42897.95186521704d11091.529414388488d381.3227681808908d41820.285100680245goR0i25008R1y166:d11237.455589484958d428.2745409498363d-5.84837623451111d11354.536980825264d466.30508235457864d43356.20350976264d11247.874343746824d475.8641598880325d42278.53674522584goR0i25256R1y167:d11376.164896869936d477.2162635233473d-11.590197792209928d11493.900447585884d504.24897159293073d43795.91990836311d11388.40949861385d521.6855943335303d42728.85323169954goR0i25502R1y168:d11502.840660959979d448.6436326084175d-9.157359319256843d11621.924367695452d480.86753130733206d44207.731338428945d11516.632516638805d499.5200256391171d43156.55476660877goR0i25752R1y171:d11646.218861239142d414.56726482295426d-19.483165331399203d11766.210948039192d437.07540156858494d44656.577833598116d11664.503983305603d470.63244652051134d43588.83911789494goR0i26008R1y168:d11800.674474308504d362.1015091231423d-18.725546132212425d11923.270212890588d384.72238703866935d45137.93086643706d11821.706518108049d418.5565300861343d44066.03165070581goR0i26256R1y168:d11950.921284862085d313.3138953873287d-17.685076186149875d12073.393268640435d338.1791329253097d45592.80927248391d11970.820582689788d368.8518418922219d44517.042349252646goR0i26504R1y167:d12104.09522779464d280.85525323404715d-9.518127120870522d12223.095424090052d314.1587797282563d46051.06091702951d12117.571132587143d332.24803234156457d44971.71538600051goR0i26756R1y166:d12254.705119421442d285.4109521608664d-7.891450128273241d12373.045377317567d320.656558954977d46509.31256157511d12266.933538375177d335.07363462616837d45429.96703054611goR0i27007R1y168:d12403.835757982899d326.92964614123525d-9.201674888567178d12522.778035636142d360.6859205057571d46967.56420612071d12417.062103931534d377.78077300131633d45888.21867509172goR0i27256R1y169:d12552.401890181349d405.7531283971592d-10.555244648831096d12671.931808319752d438.07144004109097d47425.81585066632d12566.652953878092d457.69011601731717d46346.47031963732goR0i27505R1y167:d12700.405848807737d521.7288627210417d-11.909974326694693d12820.495112668465d552.6095195975568d47884.06749521192d12715.707308585996d574.7109399940215d46804.72196418292goR0i27753R1y165:d12840.339955919633d651.4394183621838d-7.782499930985312d12957.77860108797d689.7096964271749d48311.76903012115d12851.047014053365d681.3387204499718d47198.56369989149goR0i28008R1y167:d13027.220566334048d682.9652428250209d19.43660216352135d13125.813851005752d736.8607509759656d48772.199714654314d13023.014302411872d707.4363861089287d47673.050063040464goR0i28256R1y166:d13181.923305819475d703.7559562171461d12.012090106557771d13286.884493074233d747.9503677918179d49215.25958063901d13180.384771288544d736.8667289026405d48131.30170758607goR0i28505R1y165:d13316.669690029d695.0678087172197d-12.545130548609526d13438.232095327226d727.1817836075306d49675.128396753455d13332.422283197662d743.6496722353592d48569.16171027321goR0i28754R1y166:d13460.548083042017d679.7126662378006d-9.16768726536272d13579.616215225433d713.7191057947804d50130.052766906236d13473.665827992114d729.1500318203816d48978.45174035879goR0i29005R1y164:d13605.329474866829d675.8144642590794d2.374608171620963d13717.967918847973d720.066378404582d50551.3973880254d13611.026827036589d715.4115438266327d49376.648305690695goR0i29172R1y164:d13702.034791345275d677.072748836781d8.184504976746393d13810.601841569318d724.9297329180476d50818.9043482855d13704.199961186881d712.9478675055209d49642.058594366135gh" );
	}
	
	function resetCrates():Void
	{
		for( i in 0...crates.length )
		{
			crates[ i ].resetToDefault();
		}
	}

	function start():Void
	{
		isGameStarted = true;

		now = gameStartTime = Date.now().getTime();

		resumeRequest();
		
		isPhysicsEnabled = true;
		persistentUpdate = true;
	}

	function resumeRequest( target:HPPButton = null ):Void
	{
		closeSubState();
		
		if ( !isGamePaused )
		{
			pause();
		}

		gameGui.resumeGameRequest();
	}
	
	function pauseRequest(target:HPPButton = null):Void
	{
		if (subState == null)
		{
			openSubState( pausePanel );
			pause();
		}
	}

	function resume():Void
	{
		isGamePaused = false;
		isPhysicsEnabled = true;
		
		totalPausedTime += now - pauseStartTime;
		
		if ( recorder != null )
		{
			recorder.resume();
		}
	}

	function pause():Void
	{
		isGamePaused = true;
		isPhysicsEnabled = false;
		
		gameGui.pause();
		pauseStartTime = now;
		
		if ( recorder != null )
		{
			recorder.pause();
		}
	}
	
	function createCamera():Void
	{
		camera = new HPPCamera();
		/*cast( camera, HPPCamera ).speedZoomEnabled = true;
		cast( camera, HPPCamera ).maxSpeedZoom = 2;
		cast( camera, HPPCamera ).speedZoomRatio = 100;*/
		camera.bgColor = FlxColor.BLACK;
		camera.targetOffset.set( 200, -50 );
		camera.setScrollBoundsRect( levelData.cameraBounds.x, levelData.cameraBounds.y, levelData.cameraBounds.width, levelData.cameraBounds.height );

		FlxG.cameras.remove( FlxG.cameras.list[0], false );
		FlxG.camera = camera;
		FlxG.cameras.add( camera );
		FlxCamera.defaultCameras = [ camera ];
	}

	function createPhysicsWorld():Void
	{
		space = new Space( new Vec2( 0, CPhysicsValue.GRAVITY ) );
		
		var walls:Body = new Body( BodyType.STATIC );
		walls.shapes.add( new Polygon( Polygon.rect( 0, 0, 1, levelData.cameraBounds.height ) ) );
		walls.shapes.add( new Polygon( Polygon.rect( levelData.cameraBounds.width, 0, 1, levelData.cameraBounds.height ) ) );
		walls.space = space;
	}

	function createGroundGraphics():Void
	{
		container.add( terrainContainer = new FlxSpriteGroup() );

		var generatedTerrain:BrushTerrain = new BrushTerrain(
			levelData.cameraBounds,
			levelData.groundPoints,
			HPPAssetManager.getGraphic( "terrain_ground_texture_" + worldId + "0000" ),
			HPPAssetManager.getGraphic( "terrain_fill_texture_" + worldId + "0000" ),
			64,
			24
		);
		
		terrainContainer.add( generatedTerrain );
	}

	function createGroundPhysics():Void
	{
		groundBodies = [];

		var filter:InteractionFilter = new InteractionFilter();
		filter.collisionGroup = CPhysicsValue.GROUND_FILTER_CATEGORY;
		filter.collisionMask = CPhysicsValue.GROUND_FILTER_MASK;

		for ( i in 0...levelData.groundPoints.length - 1 )
		{
			var angle:Float = Math.atan2( levelData.groundPoints[ i + 1 ].y - levelData.groundPoints[ i ].y, levelData.groundPoints[ i + 1 ].x - levelData.groundPoints[ i ].x );
			var distance:Float = Math.sqrt(
				Math.pow( Math.abs( levelData.groundPoints[ i + 1 ].x - levelData.groundPoints[ i ].x ), 2 ) +
				Math.pow( Math.abs( levelData.groundPoints[ i + 1 ].y - levelData.groundPoints[ i ].y ), 2 )
			);

			var body:Body = new Body( BodyType.STATIC );

			body.shapes.add( new Polygon( Polygon.box( distance, 1 ) ) );
			body.setShapeMaterials( worldId == 1 ? CPhysicsValue.MATERIAL_SNOWY_GROUND : CPhysicsValue.MATERIAL_NORMAL_GROUND );
			body.setShapeFilters( filter );
			body.position.x = levelData.groundPoints[ i ].x + ( levelData.groundPoints[ i + 1 ].x - levelData.groundPoints[ i ].x ) / 2;
			body.position.y = levelData.groundPoints[ i ].y + ( levelData.groundPoints[ i + 1 ].y - levelData.groundPoints[ i ].y ) / 2;
			body.rotation = angle;

			body.space = space;

			groundBodies.push( body );
		}
	}

	function createBridges():Void
	{
		bridgeBodies = [];
		bridgeBlocks = [];

		var index:UInt = 0;
		for ( i in 0...levelData.bridgePoints.length )
		{
			createBridge(
				new FlxPoint( levelData.bridgePoints[i].bridgeAX, levelData.bridgePoints[i].bridgeAY ),
				new FlxPoint( levelData.bridgePoints[i].bridgeBX, levelData.bridgePoints[i].bridgeBY )
			);
		}
	}

	function createBridge( pointA:FlxPoint, pointB:FlxPoint ):Void
	{
		var filter:InteractionFilter = new InteractionFilter();
		filter.collisionGroup = CPhysicsValue.BRIDGE_FILTER_CATEGORY;
		filter.collisionMask = CPhysicsValue.BRIDGE_FILTER_MASK;

		var bridgeAngle:Float = Math.atan2( pointB.y - pointA.y, pointB.x - pointA.x );
		var bridgeElementWidth:UInt = 60;
		var bridgeElementHeight:UInt = 30;
		var bridgeDistance:Float = pointA.distanceTo( pointB );
		var pieces:UInt = Math.floor( bridgeDistance / bridgeElementWidth ) + 1;

		if ( bridgeDistance % bridgeElementWidth == 0 )
		{
			pieces++;
		}

		bridgeBlocks.push( [] );
		bridgeBodies.push( [] );

		for ( i in 0...pieces )
		{
			var isLockedBridgeElement:Bool = false;
			if ( i == 0 || i == cast( pieces - 1 ) )
			{
				isLockedBridgeElement = true;
			}

			var body:Body = new Body( isLockedBridgeElement ? BodyType.STATIC : BodyType.DYNAMIC );
			body.shapes.add( new Polygon( Polygon.box( bridgeElementWidth, bridgeElementHeight ) ) );
			body.setShapeMaterials( CPhysicsValue.MATERIAL_BRIDGE );
			body.setShapeFilters( filter );
			body.allowRotation = !isLockedBridgeElement;
			body.position.x = pointA.x + i * bridgeElementWidth * Math.cos( bridgeAngle );
			body.position.y = pointA.y + i * bridgeElementWidth * Math.sin( bridgeAngle );
			body.rotation = bridgeAngle;
			body.space = space;
			bridgeBodies[bridgeBodies.length - 1].push( body );

			var bridgeBlock:FlxSprite = HPPAssetManager.getSprite( "bridge" );
			container.add( bridgeBlock );
			bridgeBlocks[bridgeBlocks.length - 1].push( bridgeBlock );

			if ( i > 0 )
			{
				var anchorA:Vec2 = new Vec2( bridgeElementWidth / 2, 0 );
				var anchorB:Vec2 = new Vec2( -bridgeElementWidth / 2, 0 );

				var pivotJointLeftLeftWheel:PivotJoint = new PivotJoint( bridgeBodies[bridgeBodies.length - 1][i - 1], bridgeBodies[bridgeBodies.length - 1][i], anchorA, anchorB );
				pivotJointLeftLeftWheel.damping = 1;
				pivotJointLeftLeftWheel.frequency = 20;
				pivotJointLeftLeftWheel.space = space;
			}
		}
	}

	function createCar():Void
	{
		// TODO remove this hack after car selector added
		car = new Car( space, levelData.startPoint.x, levelData.startPoint.y, CarDatas.getData( worldId == 0 ? 0 : 1 ), 1, CPhysicsValue.CAR_FILTER_CATEGORY, CPhysicsValue.CAR_FILTER_MASK );
		container.add( car );
	}
	
	function createGhostCar():Void
	{
		ghostCar = new GhostCar( CarDatas.getData( worldId == 0 ? 0 : 1 ), 1 );
		container.add( ghostCar );
	}
	
	function createGameObjects():Void
	{
		gameObjects = [];

		if ( levelData.gameObjects != null )
		{
			for ( i in 0...levelData.gameObjects.length )
			{
				var selectedObject:FlxSprite = HPPAssetManager.getSprite( levelData.gameObjects[ i ].texture );

				selectedObject.setPosition( levelData.gameObjects[ i ].x, levelData.gameObjects[ i ].y );
				selectedObject.origin.set( levelData.gameObjects[ i ].pivotX, levelData.gameObjects[ i ].pivotY );
				selectedObject.scale.set( levelData.gameObjects[ i ].scaleX, levelData.gameObjects[ i ].scaleY );
				selectedObject.angle = levelData.gameObjects[ i ].rotation;

				container.add( selectedObject );
				gameObjects.push( selectedObject );
			}
		}
	}

	function createCoins():Void
	{
		coins = [];

		container.add( coinContainer = new FlxSpriteGroup() );

		for ( i in 0...levelData.starPoints.length )
		{
			coins.push( cast coinContainer.add( new Coin( levelData.starPoints[ i ].x, levelData.starPoints[ i ].y ) ) );
		}
	}

	function createSmallRocks():Void
	{
		smallRocks = [];
		usedSmallRocks = [];

		for ( i in 0...30 )
		{
			var smallRock:SmallRock = new SmallRock( "small_rock_" + worldId + "_" + Math.floor( Math.random() * 3 + 1 ), releaseSmallRock );
			container.add( smallRock );
			smallRocks.push( smallRock );
		}
	}

	function createLibraryElements():Void
	{
		if ( levelData.libraryElements != null )
		{
			container.add( libraryElementContainer = new FlxSpriteGroup() );

			for( i in 0...levelData.libraryElements.length )
			{
				var libraryElement:LibraryElement = levelData.libraryElements[ i ];
				var crate:AbstractCrate;
				
				switch( libraryElement.className )
				{
					case CLibraryElement.CRATE_0:
						crate = new SmallCrate( space, libraryElement.x, libraryElement.y, libraryElement.scale );
						libraryElementContainer.add( crate );
						crates.push( crate );

					case CLibraryElement.CRATE_1:
						crate = new Crate( space, libraryElement.x, libraryElement.y, libraryElement.scale );
						libraryElementContainer.add( crate );
						crates.push( crate );

					case CLibraryElement.CRATE_2:
						crate = new LongCrate( space, libraryElement.x, libraryElement.y, libraryElement.scale );
						libraryElementContainer.add( crate );
						crates.push( crate );

					case CLibraryElement.CRATE_3:
						crate = new SmallLongCrate( space, libraryElement.x, libraryElement.y, libraryElement.scale );
						libraryElementContainer.add( crate );
						crates.push( crate );

					case CLibraryElement.CRATE_4:
						crate = new RampCrate( space, libraryElement.x, libraryElement.y, libraryElement.scale );
						libraryElementContainer.add( crate );
						crates.push( crate );

					case CLibraryElement.CRATE_5:
						crate = new SmallRampCrate( space, libraryElement.x, libraryElement.y, libraryElement.scale );
						libraryElementContainer.add( crate );
						crates.push( crate );
				}
			}
		}
	}

	override public function update( elapsed:Float ):Void
	{
		now = Date.now().getTime();
		
		super.update( elapsed );
		
		if ( isPhysicsEnabled )
		{
			space.step( CPhysicsValue.STEP );
		}
		
		if ( isGamePaused )
		{
			return;
		}
		
		calculateGameTime();
		
		if (!isLost && !isWon)
		{
			gameGui.updateRemainingTime(Math.max(0, CGameTimeValue.MAXIMUM_GAME_TIME - gameTime));
			gameGui.updateCoinCount(collectedCoin + collectedExtraCoins);
			
			up = FlxG.keys.anyPressed( [UP, W] ) || gameGui.controlUpState;
			down = FlxG.keys.anyPressed( [DOWN, S] ) || gameGui.controlDownState;
			right = FlxG.keys.anyPressed( [RIGHT, D] ) || gameGui.controlRightState;
			left = FlxG.keys.anyPressed( [LEFT, A] ) || gameGui.controlLeftState;
		}
		else
		{
			up = down = right = left = false;
		}
		
		if ( up )
		{
			car.accelerateToRight();
		}
		else if ( down )
		{
			car.accelerateToLeft();
		}
		
		if ( right )
		{
			car.rotateRight();
		}
		else if ( left )
		{
			car.rotateLeft();
		}

		updateBridges();
		updateSmallRocks();

		if (!isLost)
		{
			checkCoinPickUp();
			checkWheelieState();
			checkFlipAndNiceAirTimeState();
			checkLoose();
			checkWin();
			
			if (AppConfig.IS_DESKTOP_DEVICE && (FlxG.keys.justPressed.ESCAPE || FlxG.keys.justPressed.P))
			{
				pauseRequest(null);
			}
		}
		
		playback.showSnapshot(recorder.getElapsedTime());
	}

	function calculateGameTime():Void
	{
		if ( isGameStarted )
		{
			gameTime = now - gameStartTime - totalPausedTime;
		}
		else
		{
			gameTime = 0;
		}
	}

	function updateBridges():Void
	{
		for ( i in 0...bridgeBlocks.length )
		{
			for ( j in 0...bridgeBlocks[i].length )
			{
				var block:FlxSprite = bridgeBlocks[i][j];
				var body:Body = bridgeBodies[i][j];

				block.x = body.position.x - block.origin.x;
				block.y = body.position.y - block.origin.y;
				block.angle = body.rotation * FlxAngle.TO_DEG;
			}
		}
	}

	function updateSmallRocks():Void
	{
		var leftAngularVelocity:Float = Math.abs( car.wheelLeftPhysics.angularVel );
		var rightAngularVelocity:Float = Math.abs( car.wheelRightPhysics.angularVel );
		var carDirection:Int = car.wheelLeftPhysics.velocity.x >= 0 ? 1 : -1;

		if ( !car.leftWheelOnAir && ( up || down ) && smallRocks.length > 0 && leftAngularVelocity > 5 && Math.random() > .8 )
		{
			usedSmallRocks.push( smallRocks[ smallRocks.length - 1 ] );
			smallRocks.pop();

			var selectedSmallRock:SmallRock = usedSmallRocks[ usedSmallRocks.length - 1 ];
			selectedSmallRock.visible = true;
			selectedSmallRock.alpha = 1;
			selectedSmallRock.x = car.wheelLeftGraphics.x + car.wheelLeftGraphics.width / 2 + -carDirection * car.wheelLeftGraphics.width / 4;
			selectedSmallRock.y = car.wheelLeftGraphics.y + car.wheelLeftGraphics.height - selectedSmallRock.height;
			selectedSmallRock.startAnim( -carDirection, car.carBodyGraphics.angle * FlxAngle.TO_RAD );
		}

		if ( !car.rightWheelOnAir && ( up || down ) && smallRocks.length > 0 && rightAngularVelocity > 5 && Math.random() > .8 )
		{
			usedSmallRocks.push( smallRocks[ smallRocks.length - 1 ] );
			smallRocks.pop();

			var selectedSmallRock:SmallRock = usedSmallRocks[ usedSmallRocks.length - 1 ];
			selectedSmallRock.visible = true;
			selectedSmallRock.alpha = 1;
			selectedSmallRock.x = car.wheelRightGraphics.x + car.wheelRightGraphics.width / 2 + -carDirection * car.wheelRightGraphics.width / 4;
			selectedSmallRock.y = car.wheelRightGraphics.y + car.wheelRightGraphics.height - selectedSmallRock.height;
			selectedSmallRock.startAnim( -carDirection, car.carBodyGraphics.angle * FlxAngle.TO_RAD );
		}
	}

	function releaseSmallRock( target:SmallRock ):Void
	{
		smallRocks.push( target );
		usedSmallRocks.remove( target );
	}

	function checkCoinPickUp():Void
	{
		for ( i in 0...coins.length )
		{
			var coin:Coin = coins[ i ];

			if ( !coin.isCollected && coin.overlaps( car.carBodyGraphics ) )
			{
				coin.collect();
				collectedCoin++;
			}
		}
	}
	
	function checkWheelieState():Void
	{
		var isWheelieInProgress:Bool = (car.rightWheelOnAir && !car.leftWheelOnAir) || (!car.rightWheelOnAir && car.leftWheelOnAir);

		if(!isWheelieInProgress && car.isOnWheelie && gameTime - car.onWheelieStartGameTime > CGameTimeValue.MINIMUM_TIME_TO_NICE_WHEELIE_IN_MS)
		{
			startNiceWheelieTimeRutin();
		}

		if(isWheelieInProgress && !car.isOnWheelie)
		{
			car.onWheelieStartGameTime = gameTime;
		}

		car.isOnWheelie = isWheelieInProgress;
	}
	
	function checkFlipAndNiceAirTimeState():Void
	{
		var newIsOnAirValue:Bool = car.leftWheelOnAir && car.rightWheelOnAir;
		
		if(car.leftWheelOnAir && car.rightWheelOnAir)
		{
			var currentAngle:Float = Math.atan2(car.wheelLeftGraphics.y - car.wheelRightGraphics.y, car.wheelLeftGraphics.x - car.wheelRightGraphics.x);
			currentAngle = car.wheelLeftGraphics.x - car.wheelRightGraphics.x < 0 ? (Math.PI * 2 + currentAngle) : currentAngle;

			while(currentAngle > Math.PI * 2)
			{
				currentAngle -= Math.PI * 2;
			}
			
			if(!car.isOnAir)
			{
				car.onAirStartGameTime = gameTime;
				car.isOnAir = true;
				car.jumpAngle = 0;
				car.lastAngleOnGround = currentAngle;
			}
			
			var angleDiff:Float = currentAngle - car.lastAngleOnGround;

			if(angleDiff < -Math.PI)
			{
				angleDiff += Math.PI * 2;
				angleDiff *= -1;
			}
			else if(angleDiff > Math.PI)
			{
				angleDiff -= Math.PI * 2;
				angleDiff *= -1;
			}
			
			car.lastAngleOnGround = currentAngle;
			car.jumpAngle += angleDiff;
		}
		else if(car.isOnAir)
		{
			var angleInDeg:Float = car.jumpAngle * ( 180 / Math.PI );
			
			car.isOnAir = false;
			car.jumpAngle = 0;
			car.lastAngleOnGround = 0;

			if(angleInDeg > 200)
			{
				startFrontFlipRutin();
			}
			else if(angleInDeg < -200)
			{
				startBackFlipRutin();
			}

			if(gameTime - car.onAirStartGameTime > CGameTimeValue.MINIMUM_TIME_TO_NICE_AIR_IN_MS)
			{
				startNiceAirTimeRutin();
			}
		}
	}

	function checkLoose():Void
	{
		if (!isLost && !isWon && (car.isCarCrashed || gameTime >= CGameTimeValue.MAXIMUM_GAME_TIME))
		{
			isLost = true;
			
			if (car.isCarCrashed)
			{
				camera.shake( .02, .2 );
				addEffect(car.carBodyGraphics.x - 30, car.carBodyGraphics.y - 20, GameEffect.TYPE_CRUSHED);
			}
			else
			{
				addEffect(car.carBodyGraphics.x - 30, car.carBodyGraphics.y - 20, GameEffect.TYPE_TIME_OUT);
			}
			
			Timer.delay(restartRutin, 1500);
		}
	}

	function checkWin():Void
	{
		if (!isLost && !isWon && car.carBodyGraphics.x >= levelData.finishPoint.x)
		{
			isWon = true;
			
			addEffect(car.carBodyGraphics.x - 30, car.carBodyGraphics.y - 20, GameEffect.TYPE_LEVEL_COMPLETED);
			
			Timer.delay(winRutin, 500);
		}
	}
	
	function winRutin():Void 
	{
		collectedCoin += collectedExtraCoins;
		
		var score:UInt = calculateScore();
		
		var starCount:UInt = coinsToStarCount(score);
		var levelInfo:LevelInfo = SavedDataUtil.getLevelInfo(worldId, levelId);
		levelInfo.time = ( gameTime < levelInfo.time || levelInfo.time == 0 ) ? gameTime : levelInfo.time;
		
		levelInfo.score = score > levelInfo.score ? score : levelInfo.score;
		levelInfo.isCompleted = true;
		levelInfo.starCount = starCount > levelInfo.starCount ? starCount : levelInfo.starCount;
		levelInfo.collectedCoins = collectedCoin > levelInfo.collectedCoins ? collectedCoin : levelInfo.collectedCoins;
		
		if (levelId < 23)
		{
			levelInfo = SavedDataUtil.getLevelInfo(worldId, levelId + 1);
			levelInfo.isEnabled = true;
		}
		if (levelId == 23)
		{
			levelInfo = SavedDataUtil.getLevelInfo(worldId + 1, 0);
			levelInfo.isEnabled = true;
		}
		
		recorder.takeSnapshot();
		trace(recorder.toString());
		
		SavedDataUtil.save();
		
		persistentUpdate = false;
		openSubState( endLevelPanel );
		endLevelPanel.updateView(score, gameTime, collectedCoin, starCount);
	}
	
	function calculateScore():UInt
	{
		var result = 0;
		
		result = Math.floor(AppConfig.MAXIMUM_GAME_TIME_BONUS - gameTime / 10);
		result += collectedCoin * AppConfig.COIN_SCORE_MULTIPLIER;
		
		return result;
	}
	
	public function coinsToStarCount(value:UInt):UInt
	{
		var starCount:UInt = 0;

		for( i in 0...levelData.starValues.length)
		{
			if(value >= levelData.starValues[i])
			{
				starCount = i + 1;
			}
			else
			{
				return starCount;
			}
		}

		return starCount;
	}
	
	function startFrontFlipRutin():Void
	{
		countOfFrontFlip++;

		collectedExtraCoins += CScore.SCORE_FRONT_FLIP;

		//checkFrontFlipTasks();

		gameGui.addNotification(Notification.FRONT_FLIP);
	}

	function startBackFlipRutin():Void
	{
		countOfBackFlip++;

		collectedExtraCoins += CScore.SCORE_BACK_FLIP;

		//checkBackFlipTasks();

		gameGui.addNotification(Notification.BACK_FLIP);
	}

	function startNiceAirTimeRutin():Void
	{
		countOfNiceAirTime++;

		collectedExtraCoins += CScore.SCORE_NICE_AIR_TIME;

		//checkNiceAirTimeTasks();

		gameGui.addNotification(Notification.NICE_AIR);
	}


	function startNiceWheelieTimeRutin():Void
	{
		countOfNiceWheelie++;

		collectedExtraCoins += CScore.SCORE_NICE_WHEELIE_TIME;

		//checkNiceWheelieTimeTasks();

		gameGui.addNotification(Notification.NICE_WHEELIE);
	}
	
	function addEffect(x:Float, y:Float, effectType:GameEffect):Void
	{
		var effect:FlxSprite = HPPAssetManager.getSprite(cast effectType);

		effect.origin.set(effect.width / 2, effect.height / 2);
		effect.x = x;
		effect.y = y;
		effect.scale.set(.5, .5);
		effect.alpha = AppConfig.IS_ALPHA_ANIMATION_ENABLED ? 0 : 1;

		if (AppConfig.IS_ALPHA_ANIMATION_ENABLED)
		{
			FlxTween.tween(
				effect,
				{ alpha: 1 },
				.5
			);
			FlxTween.tween(
				effect,
				{ alpha: 0 },
				.3,
				{ startDelay: 1 }
			);
		}
		
		FlxTween.tween(
			effect.scale,
			{ 
				x: 1,
				y: 1,
			},
			.3
		);
		
		FlxTween.tween(
			effect.scale,
			{ 
				x: 0,
				y: 0,
			},
			.2,
			{ startDelay: 1, onComplete: function(_) { disposeEffect(effect); } }
		);
		
		container.add(effect);
		effects.push(effect);
	}

	function disposeEffect(target:FlxSprite):Void
	{
		for (effect in effects)
		{
			if (effect == target)
			{
				effects.remove(effect);
				effect.destroy();
				effect = null;
				
				return;
			}
		}
	}

	function restartRutin():Void
	{
		reset();
	}
	
	function restartRequest(target:HPPButton = null):Void
	{
		restartRutin();
	}
	
	function exitRequest(target:HPPButton = null):Void
	{
		FlxG.switchState(new MenuState(MenuSubStateType.LEVEL_SELECTOR, {worldId: worldId}));
	}
	
	function nextLevelRequest(target:HPPButton = null):Void
	{
		FlxG.switchState( new GameState(worldId, levelId + 1));
	}
	
	function prevLevelRequest(target:HPPButton = null):Void
	{
		FlxG.switchState( new GameState(worldId, levelId - 1));
	}
	
	override public function onFocusLost():Void 
	{
		if (isGameStarted)
		{
			pauseRequest();
		}
		
		super.onFocusLost();
	}
	
	override public function destroy():Void
	{
		HPPAssetManager.clear();
		
		super.destroy();
	}
}

@:enum
abstract GameEffect(String) {
	var TYPE_LEVEL_COMPLETED = "effect_level_completed";
	var TYPE_CRUSHED = "effect_crushed";
	var TYPE_TIME_OUT = "effect_time_out";
}